name: Terraform Deploy + Flask App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    # env:
    #   AWS_REGION: ap-south-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      # working-directory: ./terraform

    - name: Terraform fmt
      run: terraform fmt
      # working-directory: ./terraform

    - name: Terraform validate
      run: terraform validate
      # working-directory: ./terraform

    - name: Terraform plan
      run: terraform plan --var-file zones.tfvars
      # working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply --var-file zones.tfvars -auto-approve
      # working-directory: ./terraform

    - name: Get Bastion Instance ID
      id: bastion
      run: |
        instance_id=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=bastion-host" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text --region $AWS_REGION)
        echo "instance_id=$instance_id" >> $GITHUB_OUTPUT

    - name: Deploy Flask App via SSM
      run: |
        aws ssm send-command \
          --instance-ids ${{ steps.bastion.outputs.instance_id }} \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy Flask app" \
          --parameters commands=["$(cat scripts/deploy_flask.sh)"] \
          --region $AWS_REGION
